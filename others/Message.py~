''' /* Message.Document */
Node:
	NodeHypervisorReq(id, name, owner, type, mem, disk, cores)
	NodeHypervisorRt(status, msg)
	NodeNetworkingReq()
	NodeStorageReq()
	NodeMonitoringReq()

Rack:
	RackHypervisorReq(id, name, owner, type, mem, disk, cores)
	RackHypervisorRt(status, msg)
	RackStorageReq()
	RackStorageRt(status, msg)
	RackMonitoringReq()

Cluster:
	ClusterVirtualMachineManagerReq(id, name, owner, type, mem, disk, cores)
	ClusterVirtualMachineManagerRt(status, msg)
	clusterVMMaerReq

DatabaseSubsystem:
	ClusterDatabaseSubsystemReq()
	clusterDBSubsysReq()
	get_av_PM_req
	getAvPMRes

VirtualMachinePrototype:
	ClusterPrototypeSubsystemReq()
	GetAvailableVirtualMachinePrototypeReq(auth)
	ClusterPrototypeSubsystemRt(status, msg)
	ClusterLoggingSubsystemReq()

Cloud:
	GetAvailableClustersReq(auth)
	GetAvailableClustersRt(msg, avClusters)
'''

'''Node'''
class Message():
    pass
class NodeHypervisorReq():
	def __init__(self, **args):
		
		#check arguments
		#if 'id' in args.keys():
		#add error log

		self.id = args['id']
		self.name = args['name']
		self.owner = args['owner']
		self.type = args['type']
		self.mem = args['mem']
		self.disk = args['disk']
		self.cores = args['cores']

class NodeHypervisorRt():
	def __init__(self, **args):
		self.status = args['status']
		self.msg = args['msg']

class NodeNetworkingReq():
	def __init__(self):
		pass

class NodeStorageReq():
	def __init__(self):
		pass

class NodeStorageRt():
	def __init__(self, **args):
		self.status = args['status']
		self.msg = args['msg']

class NodeMonitoringReq():
	def __init__(self):
		pass
'''Rack'''
class RackHypervisorReq():
	def __init__(self, **args):
		self.id = args['id']
		self.name = args['name']
		self.owner = args['owner']
		self.type = args['type']
		self.mem = args['mem']
		self.disk = args['disk']
		self.cores = args['cores']

class RackHypervisorRt():
	def __init__(self, **args):
		self.status = args['status']
		self.msg = args['msg']

class RackNetworkingReq():
	def __init__(self):
		pass

class RackStorageReq():
	def __init__(self):
		pass

class RackStorageRt():
	def __init__(self, **args):
		self.status = args['status']
		self.msg = args['msg']

class RackMonitoringReq():
	def __init__(self):
		pass

'''Cluster'''
class ClusterVirtualMachineManagerReq():
	def __init__(self, **args):
		self.id = args['id']
		self.name = args['name']
		self.owner = args['owner']
		self.type = args['type']
		self.mem = args['mem']
		self.disk = args['disk']
		self.cores = args['cores']

class ClusterVirtualMachineManagerRt():
	def __init__(self, **args):
		self.status = args['status']
		self.msg = args['msg']

'''DatabaseSubsystem'''
class ClusterDatabaseSubsystemReq():
	def __init__(self):
		pass

class GetAvailablePhysicalMachineReq():
	def __init__(self, **args):
		self.auth = args['auth']

class GetAvailablePhysicalMachineRt():
	def __init__(self, **args):
		self.msg = args['msg']

'''VirtualMachinePrototype'''
class ClusterPrototypeSubsystemReq():
	def __init__(self):
		pass

class GetAvailableVirtualMachinePrototypeReq():
	def __init__(self, **args):
		self.auth = args['auth']

class ClusterPrototypeSubsystemRt():
	def __init__(self, **args):
		self.status = args['status']
		self.msg = args['msg']

class ClusterLoggingSubsystemReq():
	def __init__(self):
		pass
'''Cloud'''
class GetAvailableClustersReq():
	def __init__(self, **args):
		self.auth = args['auth']

class GetAvailableClustersRt():
	def __init__(self, **args):
		self.status = args['status']
		self.msg = args['msg']
		self.avClusters = args['avClusters']

''' Command '''
class CommandReq():
    def __init__(self, **args):
        self.CommandName = args['CommandName']
        self.CommandObject = args['CommandObject']
class CommandRes():
    def __init__(self, **args):
        self.CommandName = args['CommandName']
        self.isSuccess = args['isSuccess']
        self.msg = args['msg']
        self.obj = args['obj']
class ShutdownReq(Message):
    def __init__(self, **args):
        pass
class ShutdownRes():
    def __init__(self, **args):
        self.response = args['response']

class ChangeRelationReq(Message):
    def __init__(self, **args):
        self.relation = args['relation']
class ChangeRelationRes():
    def __init__(self, **args):
        self.msg = args['msg']

class CommandGetPingReq(Message):
    def __init__(self, **args):
        self.target_address = args['target_address']
        self.ping_times = int( args['ping_times'] )
class CommandGetPingRes():
    def __init__(self, **args):
        self.msg = args['msg']

class Ping():
    def __init__(self, **args):
        self.from_addr = args['from_addr']
        self.dest_addr = args['dest_addr']
    pass
class Pong():
    def __init__(self, **args):
        self.from_addr = args['from_addr']
        self.dest_addr = args['dest_addr']
    pass

class BlockingReq():
    def __init__(self, **kargs):
        self.interval = kargs['interval']
class BlockingRes():
    def __init__(self, **kargs):
        pass

''' Gerneral '''
class Error():
    def __init__(self, **kargs):
        self.msg = kargs['msg']
